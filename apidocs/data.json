{
    "project": {
        "name": "MaduroJS",
        "description": "MaduroJS is a library of data structures and sorting algorithms in JavaScript",
        "version": "0.0.1",
        "url": "http://madurojs.com/"
    },
    "files": {
        "src/hashTable.js": {
            "name": "src/hashTable.js",
            "modules": {},
            "classes": {
                "hashTable": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/linkedList.js": {
            "name": "src/linkedList.js",
            "modules": {},
            "classes": {
                "linkedList": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/list.js": {
            "name": "src/list.js",
            "modules": {},
            "classes": {
                "List": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/queue.js": {
            "name": "src/queue.js",
            "modules": {},
            "classes": {
                "Queue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/stack.js": {
            "name": "src/stack.js",
            "modules": {},
            "classes": {
                "Stack": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/utils.js": {
            "name": "src/utils.js",
            "modules": {},
            "classes": {
                "Utils": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "hashTable": {
            "name": "hashTable",
            "shortname": "hashTable",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/hashTable.js",
            "line": 3,
            "description": "Provides a hash table data structure"
        },
        "linkedList": {
            "name": "linkedList",
            "shortname": "linkedList",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/linkedList.js",
            "line": 7,
            "description": "Provides a linked list data structure"
        },
        "List": {
            "name": "List",
            "shortname": "List",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/list.js",
            "line": 2,
            "description": "Provides a list abstract data structure"
        },
        "Queue": {
            "name": "Queue",
            "shortname": "Queue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/queue.js",
            "line": 3,
            "description": "Provides a basic queue class"
        },
        "Stack": {
            "name": "Stack",
            "shortname": "Stack",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/stack.js",
            "line": 3,
            "description": "Provides a stack"
        },
        "Utils": {
            "name": "Utils",
            "shortname": "Utils",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "src/utils.js",
            "line": 1,
            "description": "A class of utility functions"
        }
    },
    "classitems": [
        {
            "file": "src/hashTable.js",
            "line": 15,
            "description": "This function takes in a data object and adds it to the hash table using\nthe valueAccessor function to define the key value to be hashed.",
            "itemtype": "method",
            "name": "put",
            "params": [
                {
                    "name": "data",
                    "description": "- This is the data to be stored in the hash table",
                    "type": "*"
                }
            ],
            "class": "hashTable"
        },
        {
            "file": "src/hashTable.js",
            "line": 38,
            "description": "This function returns the data stored using the key to identify the element",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "- the key that is hashed to store the data",
                    "type": "String or number"
                }
            ],
            "return": {
                "description": "data - the data that was stored with the key",
                "type": "*"
            },
            "class": "hashTable"
        },
        {
            "file": "src/hashTable.js",
            "line": 54,
            "description": "This function empties the hash table by reseting the data.",
            "itemtype": "method",
            "name": "clear",
            "class": "hashTable"
        },
        {
            "file": "src/linkedList.js",
            "line": 20,
            "description": "This function will return the first element that matches value from the value accessor.\nIf no elements are found, it returns null.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "value",
                    "description": "- The value to identify the element",
                    "type": "Number, string, or bool"
                }
            ],
            "return": {
                "description": "element - The element in the linked list",
                "type": "*"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 37,
            "description": "This function will find the element in the list that is before the element\nwith the provided value.",
            "itemtype": "method",
            "name": "findPrev",
            "params": [
                {
                    "name": "value",
                    "description": "- The value used to find the element",
                    "type": "Number, string, bool"
                }
            ],
            "return": {
                "description": "node - The node that is before in the list.",
                "type": "*"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 54,
            "description": "This function inserts a new element to the list after the provided node in the list.\nIf the second parameter is not provided or a reference node is not found, the new node will be\ninserted at the front of the list. This will also increment the length of the list.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "newElement",
                    "description": "- The new element to be inserted",
                    "type": "*"
                },
                {
                    "name": "value",
                    "description": "- The value to identify where the new node is inserted",
                    "type": "Number, string, bool"
                }
            ],
            "return": {
                "description": "node - The new node that was inserted.",
                "type": "Object"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 75,
            "description": "This function will remove the first node in the list with provided value\nand return the node value. If no matching node is found, the function will\nreturn null. This will also decrement the length of the list.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "value",
                    "description": "- The value to find a node in the list",
                    "type": "Number, string, bool"
                }
            ],
            "return": {
                "description": "node - The found node or null",
                "type": "*"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 98,
            "description": "This function returns the first node in the list.",
            "itemtype": "method",
            "name": "first",
            "return": {
                "description": "node - The first node in the list.",
                "type": "Object"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 108,
            "description": "This function removes link from the head so there is no reference to the nodes\nand reset the length of the list to 0.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "result - Did the operation succeed in clearing the list",
                "type": "Bool"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 120,
            "description": "This function will return the current number items in the list.",
            "itemtype": "method",
            "name": "size",
            "return": {
                "description": "size - The number items in the list.",
                "type": "Number"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 130,
            "description": "This function will take all the values in the list and put them in an array.",
            "itemtype": "method",
            "name": "toArray",
            "return": {
                "description": "listItems - An array of all the values in the list.",
                "type": "Array"
            },
            "class": "linkedList"
        },
        {
            "file": "src/linkedList.js",
            "line": 148,
            "description": "This function returns true if the list does not contain any items.\nOtherwise, it will return false.",
            "itemtype": "method",
            "name": "isEmpty",
            "return": {
                "description": "empty - A boolean value depending on whether the list has any items.",
                "type": "Bool"
            },
            "class": "linkedList"
        },
        {
            "file": "src/list.js",
            "line": 15,
            "description": "This function resets the list data and current position to 0.",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 26,
            "description": "This function takes an element and searchs list for the element and\nreturns the position of the element in the list.",
            "itemtype": "method",
            "name": "find",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, Object, or String"
                }
            ],
            "return": {
                "description": "The position of the element",
                "type": "Number"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 47,
            "description": "This function takes an element and adds it to the end of the list.",
            "itemtype": "method",
            "name": "append",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, Object, or String"
                }
            ],
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 58,
            "description": "This function takes an argument removes the appropriate element from \nthe list and either returns true if successful or false if not",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, Object, or String"
                }
            ],
            "return": {
                "description": "was removal successful",
                "type": "Bool"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 76,
            "description": "This function returns the current number of element in the list.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "number of items in the list",
                "type": "Number"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 86,
            "description": "This function inserts an element in the list after the provided element.",
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "oldElm",
                    "description": "",
                    "type": "Number, Object, or String"
                },
                {
                    "name": "newElm",
                    "description": "",
                    "type": "Number, Object, or String"
                }
            ],
            "return": {
                "description": "the success of the insert",
                "type": "Bool"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 105,
            "description": "This function returns a boolean indicating if the element is in the list.",
            "itemtype": "method",
            "name": "contains",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, Object, or String"
                }
            ],
            "return": {
                "description": "element is in the list",
                "type": "Bool"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 116,
            "description": "This function sets the current position to the front of the list..",
            "itemtype": "method",
            "name": "front",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 126,
            "description": "This function sets the current position to the end of the list.",
            "itemtype": "method",
            "name": "end",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 136,
            "description": "This function decrements the position by one. If the front of the list \nis reached it will not decrement any further.",
            "itemtype": "method",
            "name": "prev",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 149,
            "description": "This function increments the position by one.",
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "",
                "type": "Undefined"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 161,
            "description": "This function returns the current position of the list.",
            "itemtype": "method",
            "name": "position",
            "return": {
                "description": "current position",
                "type": "Number"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 171,
            "description": "This function sets the current position in the list. If the number is \nwithin the list, it returns true, else, it returns false.",
            "itemtype": "method",
            "name": "moveTo",
            "params": [
                {
                    "name": "position",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "if the operation was successful",
                "type": "Bool"
            },
            "class": "List"
        },
        {
            "file": "src/list.js",
            "line": 188,
            "description": "This function returns the element at the current position of the list.",
            "itemtype": "method",
            "name": "getElement",
            "return": {
                "description": "the element at the current position",
                "type": "Number, Object, or String"
            },
            "class": "List"
        },
        {
            "file": "src/queue.js",
            "line": 14,
            "description": "This function adds the passed in element to the end of the queue.",
            "itemtype": "method",
            "name": "enqueue",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, String, Array, Object, Bool"
                }
            ],
            "class": "Queue"
        },
        {
            "file": "src/queue.js",
            "line": 24,
            "description": "This function returns the first item in the array and removes it\nfrom the queue.",
            "itemtype": "method",
            "name": "dequeue",
            "return": {
                "description": "element",
                "type": "Number, String, Array, Object, Bool"
            },
            "class": "Queue"
        },
        {
            "file": "src/queue.js",
            "line": 35,
            "description": "This function returns the first item in the queue.",
            "itemtype": "method",
            "name": "front",
            "return": {
                "description": "element",
                "type": "Number, String, Array, Object, Bool"
            },
            "class": "Queue"
        },
        {
            "file": "src/queue.js",
            "line": 45,
            "description": "This function returns the last item in the queue",
            "itemtype": "method",
            "name": "back",
            "return": {
                "description": "element",
                "type": "Number, String, Array, Object, Bool"
            },
            "class": "Queue"
        },
        {
            "file": "src/queue.js",
            "line": 55,
            "description": "This function returns the current number of items in the queue.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "length",
                "type": "Number"
            },
            "class": "Queue"
        },
        {
            "file": "src/queue.js",
            "line": 65,
            "description": "This function will clear all items out of the queue.",
            "itemtype": "method",
            "name": "empty",
            "class": "Queue"
        },
        {
            "file": "src/stack.js",
            "line": 15,
            "description": "This function adds the element to the top of the stack and increases\nthe stack size",
            "itemtype": "method",
            "name": "push",
            "params": [
                {
                    "name": "element",
                    "description": "",
                    "type": "Number, String, Array, Object, Bool"
                }
            ],
            "class": "Stack"
        },
        {
            "file": "src/stack.js",
            "line": 27,
            "description": "This function returns the element on the top of the stack and removes it.",
            "itemtype": "method",
            "name": "pop",
            "return": {
                "description": "element",
                "type": "Number, String, Array, Object, Bool"
            },
            "class": "Stack"
        },
        {
            "file": "src/stack.js",
            "line": 38,
            "description": "This function returns the element on the top of the stack without\nremoving it from the stack.",
            "itemtype": "method",
            "name": "peek",
            "return": {
                "description": "element",
                "type": "Number, String, Array, Object, Bool"
            },
            "class": "Stack"
        },
        {
            "file": "src/stack.js",
            "line": 49,
            "description": "This function will clear all items out of the queue.",
            "itemtype": "method",
            "name": "clear",
            "class": "Stack"
        },
        {
            "file": "src/stack.js",
            "line": 59,
            "description": "This function returns the current number of items in the queue.",
            "itemtype": "method",
            "name": "length",
            "return": {
                "description": "length",
                "type": "Number"
            },
            "class": "Stack"
        },
        {
            "file": "src/utils.js",
            "line": 8,
            "description": "This is a basic function that just returns the provided value.",
            "itemtype": "method",
            "name": "identity",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Number, String, Object, Array, Bool, Function"
                }
            ],
            "return": {
                "description": "value",
                "type": "Number, String, Object, Array, Bool, Function"
            },
            "class": "Utils"
        },
        {
            "file": "src/utils.js",
            "line": 19,
            "description": "This function takes a string or number and returns the hash value serialized in base 10.\nIf a radix is provided, the hash value is serialized in the provided radix.",
            "itemtype": "method",
            "name": "hash",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "String, Number"
                },
                {
                    "name": "radix",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "hash",
                "type": "String"
            },
            "class": "Utils"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/list.js:116"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/list.js:126"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/list.js:136"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src/list.js:149"
        }
    ]
}